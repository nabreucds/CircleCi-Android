# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# load variables from .env file in the root if it exists
if File.exist?('../.env')
  open('../.env', 'r').readlines.each do |l|
    kv = l.split('=')
    ENV[kv[0]] = kv[1].chomp
  end
end

lane :upload_build_to_appcenter do
    gradle(
        task: 'assemble',
        build_type: 'debug'
      )

    # app should be autocreated if not found
    appcenter_upload(
        app_name: "FastlaneSampleApp",
        app_os: 'Android',
        app_platform: 'Java',
        apk: "./app/build/outputs/apk/debug/app-debug.apk",
        notify_testers: true
    )

    slack(
      message: "Build uploaded to Appcenter",
      success: true,
      slack_url: "https://hooks.slack.com/services/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",
    )
end

lane :build_and_distribute do
    gradle(
        task: 'assemble',
        build_type: build_type_from_branch,
        flavor: flavor_from_branch
    )

    #upload_to_appcenter

    slack(
        pretext: 'A new build was successfully uploaded to AppCenter ðŸš€',
        default_payloads: [:git_branch, :last_git_commit, :git_author]
    )
end

error do |lane, exception|
    slack(
        message: 'There was an error running the following lane: #{lane}\nError message: #{exception.message}'
    )
end

# Private lanes

private_lane :upload_to_appcenter do
    appcenter_upload(
            app_name: app_name,
            app_os: 'Android',
            app_platform: 'Java',
            apk: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
            destinations: distribution_group,
            destination_type: 'group',
            notify_testers: true,
            mandatory_update: true
    )
end

private_lane :app_name do
    name = ''

    case lane_context[SharedValues::GRADLE_FLAVOR]
    when 'att'
        name = name + 'ATT'
    when 'golfbook'
        name = name + 'Golf-Book'
    else
        name = name + 'Supreme-Golf'
    end

    if lane_context[SharedValues::GRADLE_BUILD_TYPE] == 'release'
        name = name + '-Release-Candidate'
    else
        name = name + '-Stage'
    end

    name
end

private_lane :distribution_group do
    if lane_context[SharedValues::GRADLE_BUILD_TYPE] == 'release'
        ENV["APPCENTER_RELEASE_DISTRIBUTION_GROUP"]
    else
        ENV["APPCENTER_STAGE_DISTRIBUTION_GROUP"]
    end
end

private_lane :flavor_from_branch do
    current_branch = git_branch | 'stage'
    
    branch_tokens = current_branch.split('_')
    case branch_tokens[0]
    when 'att'
        'att'
    when 'golfbook'
        'golfbook'
    else
        'supremegolf'
    end
end

private_lane :build_type_from_branch do
    current_branch = git_branch | 'stage'
    
    if current_branch.end_with?('release_candidate')
        'release'
    else
        'stageRelease'
    end
end